{"version":3,"file":"type-helper.js","sourceRoot":"","sources":["src/type-helper.ts"],"names":[],"mappings":"AAAA,uDAAuD","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type Constructor<T> = new (...args: any[]) => T;\n\nexport type MaybePromise<T> = T | Promise<T>;\nexport type SingleOrArray<T> = T | T[];\n\nexport type OmitFirstParam<F> = F extends (x: any, ...args: infer A) => infer R ? (...args: A) => R : never;\n\n/**\n * Object that can be JSON.stringify.\n */\nexport type Stringifyable =\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | {[P: string]: Stringifyable}\n  | Stringifyable[];\n\nexport type StringifyableRecord = Record<string, Stringifyable>;\n\nexport type Prop<T, K> = K extends keyof T ? T[K] : never;\n\nexport type Values<T> = T[keyof T];\nexport type ArrayItems<T> = T extends (infer K)[] ? K : T;\n\nexport type Merge<M, N> = Omit<M, keyof N> & N;\n"]}