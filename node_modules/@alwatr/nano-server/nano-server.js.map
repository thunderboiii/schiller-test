{"version":3,"file":"nano-server.js","sourceRoot":"","sources":["src/nano-server.ts"],"names":[],"mappings":"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","sourcesContent":["import {createServer} from 'node:http';\n\nimport {createLogger, definePackage, type AlwatrLogger} from '@alwatr/logger';\nimport {isNumber} from '@alwatr/math';\n\nimport type {NanoServerConfig, ConnectionConfig} from './type.js';\nimport type {\n  AlwatrServiceResponse,\n  AlwatrServiceResponseFailed,\n  AlwatrServiceResponseSuccess,\n  AlwatrServiceResponseSuccessWithMeta,\n  MaybePromise,\n  Methods,\n  ParamKeyType,\n  ParamValueType,\n  QueryParameters,\n  Stringifyable,\n  StringifyableRecord,\n  UserAuth,\n} from '@alwatr/type';\nimport type {IncomingMessage, ServerResponse} from 'node:http';\nimport type {Duplex} from 'node:stream';\n\nexport type RouteMiddleware<\n  TData extends Stringifyable = Stringifyable,\n  TMeta extends StringifyableRecord = StringifyableRecord,\n> = (connection: AlwatrConnection) => MaybePromise<AlwatrServiceResponse<TData, TMeta> | null>;\n\nexport type {\n  NanoServerConfig,\n  ConnectionConfig,\n  AlwatrServiceResponse,\n  AlwatrServiceResponseFailed,\n  AlwatrServiceResponseSuccess,\n  AlwatrServiceResponseSuccessWithMeta,\n};\n\ndefinePackage('nano-server', '1.x');\n\nexport class AlwatrNanoServer {\n  protected _config: NanoServerConfig;\n  protected _logger: AlwatrLogger;\n\n  /**\n   * Core HTTP Server.\n   */\n  httpServer;\n\n  /**\n   * Create a server for nanoservice use cases.\n   *\n   * Example:\n   *\n   * ```ts\n   * import {AlwatrNanoServer} from '@alwatr/nano-server';\n   * const nanoServer = new AlwatrNanoServer();\n   *\n   * nanoServer.route('GET', '/', async (connection) => {\n   *   ok: true,\n   *   data: {\n   *    app: 'Alwatr Nanoservice Starter Kit',\n   *    message: 'Hello ;)',\n   *   },\n   *  };\n   * );\n   * ```\n   */\n  constructor(config?: Partial<NanoServerConfig>) {\n    this._config = {\n      host: '0.0.0.0',\n      port: 80,\n      requestTimeout: 10_000,\n      headersTimeout: 130_000,\n      keepAliveTimeout: 120_000,\n      healthRoute: true,\n      allowAllOrigin: false,\n      prefixPattern: 'api',\n      ...config,\n    };\n\n    this._logger = createLogger('alwatr/nano-server' + (this._config.port !== 80 ? ':' + this._config.port : ''));\n    this._logger.logMethodArgs?.('constructor', {config: this._config});\n\n    this._requestListener = this._requestListener.bind(this);\n    this._errorListener = this._errorListener.bind(this);\n    this._clientErrorListener = this._clientErrorListener.bind(this);\n    this._onHealthCheckRequest = this._onHealthCheckRequest.bind(this);\n    this.httpServer = createServer(\n      {\n        keepAlive: true,\n        keepAliveInitialDelay: 0,\n        noDelay: true,\n      },\n      this._requestListener,\n    );\n    this.httpServer.requestTimeout = this._config.requestTimeout;\n    this.httpServer.keepAliveTimeout = this._config.keepAliveTimeout;\n    this.httpServer.headersTimeout = this._config.headersTimeout;\n\n    this.httpServer.on('error', this._errorListener);\n    this.httpServer.on('clientError', this._clientErrorListener);\n\n    if (this._config.healthRoute === true) {\n      this.route('GET', '/health', this._onHealthCheckRequest);\n    }\n\n    if (this._config.allowAllOrigin === true) {\n      this.route('OPTIONS', 'all', this._onHOptionRequest);\n    }\n\n    this.httpServer.listen(this._config.port, this._config.host, () => {\n      this._logger.logOther?.(`listening on ${this._config.host}:${this._config.port}`);\n    });\n  }\n\n  /**\n   * Stops the HTTP server from accepting new connections.\n   *\n   * Example:\n   *\n   * ```ts\n   * nanoserver.close();\n   * ```\n   */\n  close(): void {\n    this._logger.logMethod?.('close');\n    this.httpServer.close();\n  }\n\n  /**\n   * Refers to how an application’s endpoints (URIs) respond to client requests.\n   *\n   * @param method - Acceptable methods.\n   * @param route - Acceptable request path.\n   * @param middleware - Request handler.\n   *\n   * Example:\n   *\n   * ```ts\n   * nanoServer.route('GET', '/', async (connection) => {\n   * return {\n   *   ok: true,\n   *   data: {\n   *    app: 'Alwatr Nanoservice Starter Kit',\n   *    message: 'Hello ;)',\n   *   },\n   *  });\n   * };\n   * ```\n   */\n  route<TData extends Stringifyable = Stringifyable, TMeta extends StringifyableRecord = StringifyableRecord>(\n    method: 'ALL' | Methods,\n    route: 'all' | `/${string}`,\n    middleware: RouteMiddleware<TData, TMeta>,\n  ): void {\n    this._logger.logMethodArgs?.('route', {method, route});\n\n    if (this.middlewareList[method] == null) this.middlewareList[method] = {};\n\n    if (typeof this.middlewareList[method][route] === 'function') {\n      this._logger.accident('route', 'route_already_exists', {\n        method,\n        route,\n      });\n      throw new Error('route_already_exists');\n    }\n\n    this.middlewareList[method][route] = middleware as RouteMiddleware;\n  }\n\n  /**\n   * Responds to the request.\n   *\n   * Example:\n   * ```ts\n   * nanoServer.route('GET', '/', async (connection) => {\n   *   return {\n   *     ok: true,\n   *     data: {\n   *      app: 'Alwatr Nanoservice Starter Kit',\n   *      message: 'Hello ;)',\n   *     },\n   *    };\n   * });\n   * ```\n   */\n  reply(serverResponse: ServerResponse, content: AlwatrServiceResponse<Stringifyable, StringifyableRecord>): void {\n    content.statusCode ??= 200;\n    this._logger.logMethodArgs?.('reply', {ok: content.ok, statusCode: content.statusCode});\n\n    if (serverResponse.headersSent) {\n      this._logger.error('reply', 'http_header_sent', 'Response headers already sent');\n      if (content.ok === false) return; // prevent loop.\n      throw new Error('http_header_sent');\n    }\n\n    if (!this._logger.devMode && !content.ok && content.meta) {\n      // clear debug info from client for security reasons.\n      delete content.meta;\n    }\n\n    let buffer: Buffer;\n\n    try {\n      buffer = Buffer.from(JSON.stringify(content), 'utf8');\n    }\n    catch (err) {\n      this._logger.accident('responseData', 'data_stringify_failed', err);\n      return this.reply(\n        serverResponse,\n        content.ok === false\n          ? {\n            ok: false,\n            statusCode: content.statusCode,\n            errorCode: content.errorCode,\n          }\n          : {\n            ok: false,\n            statusCode: 500,\n            errorCode: 'data_stringify_failed',\n          },\n      );\n    }\n\n    const headers: Record<string, string | number> = {\n      'Content-Length': buffer.byteLength,\n      'Content-Type': 'application/json',\n      Server: 'Alwatr NanoServer',\n    };\n\n    if (this._config.allowAllOrigin === true) {\n      headers['Access-Control-Allow-Origin'] = '*';\n    }\n\n    try {\n      serverResponse.writeHead(content.statusCode ?? 200, headers);\n      serverResponse.end(buffer, 'binary');\n    }\n    catch (err) {\n      this._logger.error('reply', 'reply_failed', err);\n    }\n  }\n\n  protected _errorListener(err: NodeJS.ErrnoException): void {\n    if (err.code === 'EADDRINUSE') {\n      this._logger.incident?.('server.onError', 'address_in_use', err);\n      setTimeout(() => {\n        this.httpServer.close();\n        this.httpServer.listen(this._config.port, this._config.host, () => {\n          this._logger.logOther?.(`listening on ${this._config.host}:${this._config.port}`);\n        });\n      }, 2000);\n    }\n    else {\n      this._logger.error('server.onError', 'http_server_catch_error', err.message || 'HTTP server catch an error', err);\n    }\n  }\n\n  protected _clientErrorListener(err: NodeJS.ErrnoException, socket: Duplex): void {\n    this._logger.accident('server.clientError', 'http_server_catch_client_error', {\n      errCode: err.code,\n      errMessage: err.message,\n    });\n    socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n  }\n\n  protected _onHealthCheckRequest(connection: AlwatrConnection): null {\n    const body = 'ok';\n    connection.serverResponse.writeHead(200, {\n      'Content-Length': body.length,\n      'Content-Type': 'plain/text',\n      Server: 'Alwatr NanoServer',\n    });\n    connection.serverResponse.end(body);\n\n    return null;\n  }\n\n  protected _onHOptionRequest(connection: AlwatrConnection): null {\n    connection.serverResponse.writeHead(204, {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': '*',\n      'Access-Control-Allow-Headers': '*',\n    });\n    connection.serverResponse.end();\n\n    return null;\n  }\n\n  // prettier-ignore\n  protected middlewareList: Record<string, Record<string, RouteMiddleware>> = {\n    ALL: {},\n  };\n\n  protected async _requestListener(incomingMessage: IncomingMessage, serverResponse: ServerResponse): Promise<void> {\n    this._logger.logMethod?.('handleRequest');\n\n    if (incomingMessage.url == null) {\n      this._logger.accident('handleRequest', 'http_server_url_undefined');\n      return;\n    }\n\n    if (incomingMessage.method == null) {\n      this._logger.accident('handleRequest', 'http_server_method_undefined');\n      return;\n    }\n\n    const connection = new AlwatrConnection(incomingMessage, serverResponse, {\n      allowAllOrigin: this._config.allowAllOrigin,\n      prefixPattern: this._config.prefixPattern,\n    });\n    const route = connection.url.pathname;\n\n    // TODO: handled open remained connections.\n\n    const middleware =\n      this.middlewareList[connection.method]?.[route] ||\n      this.middlewareList.ALL[route] ||\n      this.middlewareList[connection.method]?.all ||\n      this.middlewareList.ALL.all ||\n      this._notFoundListener;\n\n    try {\n      const content = await middleware(connection);\n      if (content !== null) {\n        this.reply(serverResponse, content);\n      }\n    }\n    catch (errorObject) {\n      if (typeof errorObject === 'object' && errorObject != null && 'ok' in errorObject) {\n        this.reply(serverResponse, errorObject as AlwatrServiceResponse<StringifyableRecord, StringifyableRecord>);\n      }\n      else {\n        const err = errorObject as Error;\n        // 500 status code\n        this._logger.error('handleRequest', 'http_server_middleware_error', err, {\n          method: connection.method,\n          route,\n        });\n        this.reply(serverResponse, {\n          ok: false,\n          statusCode: 500,\n          errorCode: 'http_server_middleware_error',\n          meta: {\n            name: err?.name,\n            message: err?.message,\n            cause: err?.cause as StringifyableRecord,\n          },\n        });\n      }\n    }\n  }\n\n  protected _notFoundListener = (connection: AlwatrConnection): AlwatrServiceResponseFailed => {\n    return (\n      connection.serverResponse,\n      {\n        ok: false,\n        statusCode: 404,\n        errorCode: 'not_found',\n        meta: {\n          method: connection.method,\n          route: connection.url.pathname,\n        },\n      }\n    );\n  };\n}\n\n/**\n * Alwatr Connection\n */\nexport class AlwatrConnection {\n  static _versionPattern = new RegExp('^/v[0-9]+');\n\n  /**\n   * Request URL.\n   */\n  readonly url = new URL(\n    (this.incomingMessage.url ?? '')\n      .replace(new RegExp('^/' + this._config.prefixPattern), '')\n      .replace(AlwatrConnection._versionPattern, ''),\n    'http://localhost/',\n  );\n\n  /**\n   * Request method.\n   */\n  readonly method = (this.incomingMessage.method ?? 'GET').toUpperCase() as Methods;\n\n  protected _logger = createLogger('alwatr/nano-server-connection');\n\n  constructor(\n    public incomingMessage: IncomingMessage,\n    public serverResponse: ServerResponse,\n    protected _config: ConnectionConfig,\n  ) {\n    this._logger.logMethodArgs?.('constructor', {method: incomingMessage.method, url: incomingMessage.url});\n  }\n\n  /**\n   * Get the token placed in the request header.\n   */\n  getAuthBearer(): string | null {\n    const auth = this.incomingMessage.headers.authorization?.split(' ');\n\n    if (auth == null || auth[0].toLowerCase() !== 'bearer') {\n      return null;\n    }\n\n    return auth[1];\n  }\n\n  /**\n   * Get request body for POST, PUT and POST methods.\n   *\n   * Example:\n   * ```ts\n   * const body = await connection.getBody();\n   * ```\n   */\n  async getBody(): Promise<string | null> {\n    // method must be POST or PUT or PATCH\n    if (!(this.method === 'POST' || this.method === 'PUT' || this.method === 'PATCH')) {\n      return null;\n    }\n\n    let body = '';\n\n    this.incomingMessage.on('data', (chunk: unknown) => {\n      body += chunk;\n    });\n\n    await new Promise((resolve) => this.incomingMessage.once('end', resolve));\n\n    return body;\n  }\n\n  /**\n   * Parse request body.\n   *\n   * @returns Request body.\n   *\n   * Example:\n   * ```ts\n   * const bodyData = await connection.requireJsonBody();\n   * ```\n   */\n  async requireJsonBody<T extends StringifyableRecord>(): Promise<T> {\n    // if request content type is json\n    if (this.incomingMessage.headers['content-type'] !== 'application/json') {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        ok: false,\n        statusCode: 400,\n        errorCode: 'require_json_body',\n      };\n    }\n\n    const body = await this.getBody();\n\n    if (body == null || body.length === 0) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        ok: false,\n        statusCode: 400,\n        errorCode: 'require_body',\n      };\n    }\n\n    try {\n      return JSON.parse(body) as T;\n    }\n    catch (err) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        ok: false,\n        statusCode: 400,\n        errorCode: 'invalid_json',\n      };\n    }\n  }\n\n  /**\n   * Parse and validate request token.\n   *\n   * @returns Request token.\n   *\n   * Example:\n   * ```ts\n   * const token = connection.requireToken((token) => token.length > 12);\n   * if (token == null) return;\n   * ```\n   */\n  requireToken(validator?: ((token: string) => boolean) | string[] | string): string {\n    const token = this.getAuthBearer();\n\n    if (token == null) {\n      throw {\n        ok: false,\n        statusCode: 401,\n        errorCode: 'authorization_required',\n      };\n    }\n    else if (validator === undefined) {\n      return token;\n    }\n    else if (typeof validator === 'string') {\n      if (token === validator) return token;\n    }\n    else if (Array.isArray(validator)) {\n      if (validator.includes(token)) return token;\n    }\n    else if (typeof validator === 'function') {\n      if (validator(token) === true) return token;\n    }\n    throw {\n      ok: false,\n      statusCode: 403,\n      errorCode: 'access_denied',\n    };\n  }\n\n  /**\n   * Parse and get request user auth (include id and token).\n   *\n   * Example:\n   * ```ts\n   * const userAuth = connection.requireUserAuth();\n   * ```\n   */\n  getUserAuth(): UserAuth | null {\n    const auth = this.getAuthBearer()\n      ?.split('/')\n      .filter((item) => item.trim() !== '');\n\n    return auth == null || auth.length !== 2\n      ? null\n      : {\n        id: auth[0],\n        token: auth[1],\n      };\n  }\n\n  /**\n   * Parse query param and validate with param type.\n   */\n  protected _sanitizeParam(name: string, type: ParamKeyType): ParamValueType | null {\n    let value = this.url.searchParams.get(name);\n\n    if (value == null || value === '') {\n      return null;\n    }\n\n    if (type === 'string') {\n      return value;\n    }\n\n    if (type === 'number') {\n      return isNumber(value) ? +value : null;\n    }\n\n    if (type === 'boolean') {\n      value = value.trim();\n\n      if (value === 'true' || value === '1') {\n        return true;\n      }\n      else if (value === 'false' || value === '0') {\n        return false;\n      }\n      else return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Parse and validate query params.\n   *\n   * @returns Query params object.\n   *\n   * Example:\n   * ```ts\n   * const params = connection.requireQueryParams<{id: string}>({id: 'string'});\n   * console.log(params.id);\n   * ```\n   */\n  requireQueryParams<T extends QueryParameters = QueryParameters>(params: Record<string, ParamKeyType>): T {\n    const parsedParams: Record<string, ParamValueType | null> = {};\n\n    for (const paramName in params) {\n      if (!Object.prototype.hasOwnProperty.call(params, paramName)) continue;\n      const paramType = params[paramName];\n      const paramValue = (parsedParams[paramName] = this._sanitizeParam(paramName, paramType));\n      if (paramValue == null) {\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          ok: false,\n          statusCode: 406,\n          errorCode: 'query_parameter_required',\n          meta: {\n            paramName,\n            paramType,\n            paramValue,\n          },\n        };\n      }\n    }\n\n    return parsedParams as T;\n  }\n\n  getRemoteAddress(): string {\n    // prettier-ignore\n    return (\n      this.incomingMessage.headers['x-forwarded-for']\n        ?.split(',')\n        .pop()\n        ?.trim() ||\n      this.incomingMessage.socket.remoteAddress ||\n      'unknown'\n    );\n  }\n\n  requireClientId(): string {\n    const clientId = this.incomingMessage.headers['client-id'];\n\n    if (!clientId) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        ok: false,\n        statusCode: 401,\n        errorCode: 'client_denied',\n      };\n    }\n\n    return clientId;\n  }\n}\n"]}