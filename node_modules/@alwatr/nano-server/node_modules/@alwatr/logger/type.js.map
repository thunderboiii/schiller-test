{"version":3,"file":"type.js","sourceRoot":"","sources":["src/type.ts"],"names":[],"mappings":"","sourcesContent":["export interface AlwatrLogger {\n  /**\n   * Debug state for current scope base on localStorage `ALWATR_LOG` pattern.\n   */\n  readonly devMode: boolean;\n\n  /**\n   * Domain scope defined for this logger.\n   */\n  readonly domain: string;\n\n  /**\n   * `console.debug` property change.\n   *\n   * Example:\n   *\n   * ```ts\n   * logger.logProperty?.('name', 'ali');\n   * ```\n   */\n  logProperty?(property: string, value: unknown): void;\n\n  /**\n   * `console.debug` module name.\n   *\n   * Example:\n   *\n   * ```ts\n   * logger.logModule?.('app');\n   * ```\n   */\n  logModule?(name: string): void;\n\n  /**\n   * `console.debug` function or method calls.\n   *\n   * Example:\n   *\n   * ```ts\n   * function myMethod () {\n   *   logger.logMethod?.('myMethod');\n   * }\n   * ```\n   */\n  logMethod?(method: string): void;\n\n  /**\n   * `console.debug` function or method calls with arguments.\n   *\n   * Example:\n   *\n   * ```ts\n   * function myMethod (a: number, b: number) {\n   *   logger.logMethodArgs?.('myMethod', {a, b});\n   * }\n   * ```\n   */\n  logMethodArgs?(method: string, args: unknown): void;\n\n  /**\n   * `console.debug` function or method calls with arguments.\n   *\n   * Example:\n   *\n   * ```ts\n   * function add (a: number, b: number): number {\n   *   const result = a + b;\n   *   logger.logMethodFull?.('add', {a, b}, result);\n   *   return result;\n   * }\n   * ```\n   */\n  logMethodFull?(method: string, args: unknown, result: unknown): void;\n\n  /**\n   * `console.log` an event or expected accident.\n   * not warn or error just important information.\n   *\n   * Example:\n   *\n   * ```ts\n   * logger.incident?.('fetch', 'abort_signal', {url: '/test.json'});\n   * ```\n   */\n  incident?(method: string, code: string, ...args: unknown[]): void;\n\n  /**\n   * `console.warn` an unexpected accident or error that you handled like warning.\n   *\n   * Example:\n   *\n   * ```ts\n   * logger.accident('fetch', 'file_not_found', {url: '/test.json'});\n   * ```\n   */\n  accident(method: string, code: string, ...args: unknown[]): void;\n\n  /**\n   * `console.error` an unexpected error.\n   *\n   * Example:\n   *\n   * ```ts\n   * try {\n   *   ...\n   * }\n   * catch (err) {\n   *   logger.error('myMethod', 'error_code', err, {a: 1, b: 2});\n   * }\n   * ```\n   */\n  error(method: string, code: string, ...args: unknown[]): void;\n\n  /**\n   * Simple `console.debug` with styled scope.\n   *\n   * Example:\n   *\n   * ```ts\n   * logger.logOther?.('foo:', 'bar', {a: 1});\n   * ```\n   */\n  logOther?(...args: unknown[]): void;\n\n  /**\n   * Simple `console.time` with scope.\n   *\n   * Example:\n   *\n   * ```ts\n   * logger.time?.('foo');\n   * ```\n   */\n  time?(label: string): void;\n\n  /**\n   * Simple `console.timeEnd` with scope.\n   *\n   * Example:\n   *\n   * ```ts\n   * logger.timeEnd?.('foo');\n   * ```\n   */\n  timeEnd?(label: string): void;\n\n  /**\n   * log big banner\n   *\n   * Example:\n   *\n   * ```ts\n   * logger.banner('Alwatr PWA v2');\n   * ```\n   */\n  banner(message: string): void;\n}\n"]}