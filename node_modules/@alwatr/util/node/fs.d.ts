import type { StringifyableRecord } from '@alwatr/type';
/**
 * Enhanced read json file.
 * @example
 * const fileContent = readJsonFileSync('./file.json');
 */
export declare const readJsonFileSync: <T extends StringifyableRecord = StringifyableRecord>(path: string) => T | null;
/**
 * Enhanced read json file.
 * @example
 * const fileContent = await readJsonFile('./file.json');
 */
export declare const readJsonFile: <T extends StringifyableRecord = StringifyableRecord>(path: string) => Promise<T | null>;
/**
 * Enhanced write json file.
 * @example
 * writeJsonFileSync('./file.json', { a:1, b:2, c:3 });
 */
export declare const writeJsonFileSync: <T extends StringifyableRecord = StringifyableRecord>(path: string, data: T, existFile?: 'replace' | 'copy' | 'rename', space?: string | number) => void;
/**
 * Enhanced write json file.
 * @example
 * await writeJsonFile('./file.json', { a:1, b:2, c:3 });
 */
export declare const writeJsonFile: <T extends StringifyableRecord = StringifyableRecord>(path: string, data: T, existFile?: 'replace' | 'copy' | 'rename', space?: string | number) => Promise<void>;
/**
 * Make a symbolic link
 *
 * **CAUTION: the destination path will be removed if exists**
 */
export declare const makeLinkForce: (src: string, dest: string) => Promise<void>;
//# sourceMappingURL=fs.d.ts.map