{"version":3,"file":"fs.js","sourceRoot":"","sources":["../src/node/fs.ts"],"names":[],"mappings":"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","sourcesContent":["import {existsSync, readFileSync, writeFileSync, mkdirSync, copyFileSync, renameSync} from 'node:fs';\nimport {mkdir, writeFile, readFile, rm, symlink, copyFile, rename} from 'node:fs/promises';\nimport {dirname} from 'node:path';\n\nimport {createLogger} from '@alwatr/logger';\n\nimport {flatStr} from '../flat-str.js';\n\nimport type {StringifyableRecord} from '@alwatr/type';\n\nconst logger = createLogger('alwatr/util/fs', true);\n\n/**\n * Enhanced read json file.\n * @example\n * const fileContent = readJsonFileSync('./file.json');\n */\nexport const readJsonFileSync = <T extends StringifyableRecord = StringifyableRecord>(path: string): T | null => {\n  logger.logMethodArgs?.('readJsonFileSync', path);\n\n  if (!existsSync(path)) {\n    return null;\n  }\n\n  const timeKey = path.substring(path.lastIndexOf('/') + 1);\n\n  let fileContent: string;\n  logger.time?.(`readFileSync ${timeKey}`);\n  try {\n    fileContent = flatStr(readFileSync(path, {encoding: 'utf-8', flag: 'r'}));\n  }\n  catch (err) {\n    logger.error('readJsonFileSync', 'read_file_failed', err);\n    throw new Error('read_file_failed');\n  }\n  logger.timeEnd?.(`readFileSync ${timeKey}`);\n\n  let data;\n  logger.time?.(`jsonParse ${timeKey}`);\n  try {\n    data = JSON.parse(fileContent) as T;\n  }\n  catch (err) {\n    logger.error('readJsonFileSync', 'invalid_json', err);\n    throw new Error('invalid_json');\n  }\n  logger.timeEnd?.(`jsonParse ${timeKey}`);\n\n  return data;\n};\n\n/**\n * Enhanced read json file.\n * @example\n * const fileContent = await readJsonFile('./file.json');\n */\nexport const readJsonFile = async <T extends StringifyableRecord = StringifyableRecord>(\n  path: string,\n): Promise<T | null> => {\n  logger.logMethodArgs?.('readJsonFileSync', path);\n\n  if (!existsSync(path)) {\n    // existsSync is much faster than access.\n    return null;\n  }\n\n  const timeKey = path.substring(path.lastIndexOf('/') + 1);\n\n  let fileContent: string;\n  logger.time?.(`readFile ${timeKey}`);\n  try {\n    fileContent = flatStr(await readFile(path, {encoding: 'utf-8', flag: 'r'}));\n  }\n  catch (err) {\n    logger.error('readJsonFile', 'read_file_failed', err);\n    throw new Error('read_file_failed');\n  }\n  logger.timeEnd?.(`readFile ${timeKey}`);\n\n  let data;\n  logger.time?.(`jsonParse ${timeKey}`);\n  try {\n    data = JSON.parse(fileContent) as T;\n  }\n  catch (err) {\n    logger.error('readJsonFile', 'invalid_json', err);\n    throw new Error('invalid_json');\n  }\n  logger.timeEnd?.(`jsonParse ${timeKey}`);\n\n  return data;\n};\n\n/**\n * Enhanced write json file.\n * @example\n * writeJsonFileSync('./file.json', { a:1, b:2, c:3 });\n */\nexport const writeJsonFileSync = <T extends StringifyableRecord = StringifyableRecord>(\n  path: string,\n  data: T,\n  existFile: 'replace' | 'copy' | 'rename' = 'replace',\n  space?: string | number,\n): void => {\n  logger.logMethodArgs?.('writeJsonFileSync', path);\n\n  const timeKey = path.substring(path.lastIndexOf('/') + 1);\n\n  let jsonContent;\n  logger.time?.(`jsonParse ${timeKey}`);\n  try {\n    jsonContent = flatStr(JSON.stringify(data, null, space));\n  }\n  catch (err) {\n    logger.error('writeJsonFileSync', 'stringify_failed', err);\n    throw new Error('stringify_failed');\n  }\n  logger.timeEnd?.(`jsonParse ${timeKey}`);\n\n  if (existsSync(path)) {\n    try {\n      if (existFile === 'copy') {\n        copyFileSync(path, path + '.bk');\n      }\n      else if (existFile === 'rename') {\n        renameSync(path, path + '.bk');\n      }\n    }\n    catch (err) {\n      logger.error('writeJsonFileSync', 'rename_copy_failed', err);\n    }\n  }\n  else {\n    try {\n      mkdirSync(dirname(path), {recursive: true});\n    }\n    catch (err) {\n      logger.error('writeJsonFileSync', 'make_dir_failed', err);\n      throw new Error('make_dir_failed');\n    }\n  }\n\n  logger.time?.(`writeFileSync ${timeKey}`);\n  try {\n    writeFileSync(path, jsonContent, {encoding: 'utf-8', flag: 'w'});\n  }\n  catch (err) {\n    logger.error('writeJsonFileSync', 'write_file_failed', err);\n    throw new Error('write_file_failed');\n  }\n  logger.timeEnd?.(`writeFileSync ${timeKey}`);\n};\n\n/**\n * Enhanced write json file.\n * @example\n * await writeJsonFile('./file.json', { a:1, b:2, c:3 });\n */\nexport const writeJsonFile = async <T extends StringifyableRecord = StringifyableRecord>(\n  path: string,\n  data: T,\n  existFile: 'replace' | 'copy' | 'rename' = 'replace',\n  space?: string | number,\n): Promise<void> => {\n  logger.logMethodArgs?.('writeJsonFile', path);\n\n  const timeKey = path.substring(path.lastIndexOf('/') + 1);\n  logger.time?.(`writeJsonFile(${timeKey})`);\n\n  let jsonContent;\n  logger.time?.(`jsonParse ${timeKey}`);\n  try {\n    jsonContent = flatStr(JSON.stringify(data, null, space));\n  }\n  catch (err) {\n    logger.error('writeJsonFile', 'stringify_failed', err);\n    throw new Error('stringify_failed');\n  }\n  logger.timeEnd?.(`jsonParse ${timeKey}`);\n\n  if (existsSync(path)) {\n    try {\n      if (existFile === 'copy') {\n        await copyFile(path, path + '.bk');\n      }\n      else if (existFile === 'rename') {\n        await rename(path, path + '.bk');\n      }\n    }\n    catch (err) {\n      logger.error('writeJsonFile', 'rename_copy_failed', err);\n    }\n  }\n  else {\n    try {\n      await mkdir(dirname(path), {recursive: true});\n    }\n    catch (err) {\n      logger.error('writeJsonFile', 'make_dir_failed', err);\n      throw new Error('make_dir_failed');\n    }\n  }\n\n  logger.time?.(`writeFile ${timeKey}`);\n  try {\n    await writeFile(path, jsonContent, {encoding: 'utf-8', flag: 'w'});\n  }\n  catch (err) {\n    logger.error('writeJsonFile', 'write_file_failed', err);\n    throw new Error('write_file_failed');\n  }\n  logger.timeEnd?.(`writeFile ${timeKey}`);\n};\n\n/**\n * Make a symbolic link\n *\n * **CAUTION: the destination path will be removed if exists**\n */\nexport const makeLinkForce = async (src: string, dest: string): Promise<void> => {\n  logger.logMethodArgs?.('makeLink', {src, dest});\n\n  try {\n    if (existsSync(dest)) {\n      await rm(dest, {recursive: false, force: true});\n    }\n    else {\n      const destDir = dirname(dest);\n      if (!existsSync(destDir)) {\n        await mkdir(dirname(dest), {recursive: true});\n      }\n    }\n\n    await symlink(src, dest);\n  }\n  catch (error) {\n    logger.error('makeLink', 'symlink_failed', error);\n    throw error;\n  }\n};\n"]}