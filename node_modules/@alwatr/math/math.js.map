{"version":3,"file":"math.js","sourceRoot":"","sources":["src/math.ts"],"names":[],"mappings":"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","sourcesContent":["import {definePackage, globalScope} from '@alwatr/logger';\n\nimport type {TransformRangeOptions} from './type.js';\nexport {UnicodeDigits, type UnicodeLangKeys} from './unicode-digits.js';\n\ndefinePackage('math', '1.x');\n\n/**\n * Number.isFinite simple polyfill\n */\nif (typeof Number.isFinite !== 'function') {\n  Number.isFinite = isFinite;\n}\n\n/**\n * Check the value is number or can convert to a number, for example string ' 123 ' can be converted to 123\n *\n *  @param {unknown} value - the value must check numberic.\n *  @return {boolean} - is number status.\n */\nexport function isNumber(value: unknown): boolean {\n  if (typeof value === 'number') {\n    return value - value === 0;\n  }\n  if (typeof value === 'string' && value.trim() !== '') {\n    return Number.isFinite(+value);\n  }\n  return false;\n}\n\n/**\n * Transform a number from one range to another.\n *\n * Example:\n *\n * ```ts\n * transformToRange(5, {in: [0, 10], out: [0, 100]}); // => 50\n * ```\n *\n * Make percentage of any value\n *\n * ```ts\n * transformToRange(2000, {in: [0, 5000], out: [0, 100]}); // => 40\n * ```\n *\n * Calculate progress-bar with\n *\n * ```ts\n * const progressOuterWith = 400; //px\n * const gap = 5; //px (the visual gap between progressBar and component outer).\n * const currentProgress = 30; //%\n *\n * const progressBarWith = transformToRange(currentProgress, {\n *   in: [0, 100],\n *   out: [componentPadding, progressOuterWith - componentPadding],\n *   bound: true,\n * });\n *\n * this.progressBar.style.width = `${progressBarWith}px`;\n * ```\n */\nexport function transformToRange(x: number, options: TransformRangeOptions): number {\n  // prettier-ignore\n  let y = ((options.out[1] - options.out[0]) * (x - options.in[0])) / (options.in[1] - options.in[0]) + options.out[0];\n  if (options.bound) {\n    if (y < options.out[0]) {\n      y = options.out[0];\n    }\n    if (y > options.out[1]) {\n      y = options.out[1];\n    }\n  }\n\n  return y;\n}\n\nconst characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nconst charactersLength = characters.length;\n\nexport const random = {\n  /**\n   * Returns a float random number between 0 and 1 (1 Not included).\n   *\n   * Example:\n   *\n   * ```js\n   * console.log(random.number); // 0.7124123\n   * ```\n   */\n  get number(): number {\n    return Math.random();\n  },\n\n  /**\n   * Generate a random integer number between min and max (max included).\n   *\n   * Example:\n   *\n   * ```js\n   * console.log(random.integer(1, 10)); // somewhere between 1 and 10\n   * ```\n   */\n  integer: (min: number, max: number): number => Math.floor(random.float(min, max + 1)),\n\n  /**\n   * Generate a random float number between min and max (max not included).\n   *\n   * Example:\n   *\n   * ```js\n   * console.log(random.float(1, 10)); // somewhere between 1 and 10\n   * ```\n   */\n  float: (min: number, max: number): number => random.number * (max - min) + min,\n\n  /**\n   * Generate a random string with random length.\n   * The string will contain only characters from the characters list.\n   * The length of the string will be between min and max (max included).\n   * If max not specified, the length will be set to min.\n   *\n   * Example:\n   *\n   *```js\n   * console.log(random.string(6)); // something like 'Aab1V2'\n   * ```\n   */\n  string: (min: number, max?: number): string => {\n    let result = '';\n    for (let i = max != null ? random.integer(min, max) : min; i > 0; i--) {\n      result += characters.charAt(Math.floor(random.number * charactersLength));\n    }\n    return result;\n  },\n\n  /**\n   * Generate a random integer between min and max with a step.\n   *\n   * Example:\n   *\n   * ```js\n   * console.log(random.step(6, 10, 2)); // 6 or 8 or 10\n   * ```\n   */\n  step: (min: number, max: number, step: number): number => min + random.integer(0, (max - min) / step) * step,\n\n  /**\n   * Shuffle an array.\n   *\n   * Example:\n   *\n   * ```js\n   * const array = [1, 2, 3, 4, 5];\n   * random.shuffle(array);\n   * console.log(array); // [2, 4, 3, 1, 5]\n   * ```\n   */\n  shuffle: <T>(array: T[]): T[] => array.sort(() => random.number - 0.5),\n\n  getRandomValues: <T extends ArrayBufferView | null>(array: T): T => {\n    return globalScope.crypto.getRandomValues(array);\n    // TODO: check msCrypto\n  },\n\n  /**\n   * Generate Random UUID.\n   *\n   * Example:\n   *\n   * ```ts\n   * console.log(random.uuid);\n   * ```\n   */\n  get uuid(): `${string}-${string}-${string}-${string}-${string}` {\n    if (globalScope.crypto?.randomUUID) {\n      return globalScope.crypto.randomUUID() as `${string}-${string}-${string}-${string}-${string}`;\n    }\n    // else\n    const bytes = random.getRandomValues(new Uint8Array(16));\n    bytes[6] = (bytes[6] & 0x0f) | 0x40; // version\n    bytes[8] = (bytes[8] & 0xbf) | 0x80; // variant\n\n    // prettier-ignore\n    return `${\n      hex(bytes.subarray(0, 4))\n    }-${\n      hex(bytes.subarray(4, 6))\n    }-${\n      hex(bytes.subarray(6, 8))\n    }-${\n      hex(bytes.subarray(8, 10))\n    }-${\n      hex(bytes.subarray(10, 16))\n    }`;\n  },\n} as const;\n\nexport type DurationUnit = 's' | 'm' | 'h' | 'd' | 'w' | 'M' | 'y';\nexport type DurationString = `${number}${DurationUnit}`;\nconst unitConversion = {\n  s: 1_000,\n  m: 60_000,\n  h: 3_600_000,\n  d: 86_400_000,\n  w: 604_800_000,\n  M: 2_592_000_000,\n  y: 31_536_000_000,\n};\n\n/**\n * Parse duration string to target unit.\n *\n * Example:\n *\n * ```js\n * parseDuration('10s'); // 10,000\n * parseDuration('10m'); // 600,000\n * parseDuration('10h'); // 36,000,000\n * parseDuration('10d'); // 864,000,000\n * parseDuration('10w'); // 6,048,000,000\n * parseDuration('10M'); // 25,920,000,000\n * parseDuration('10y'); // 315,360,000,000\n * parseDuration('10d', 'h'); // 240\n * ```\n */\nexport const parseDuration = (duration: DurationString, toUnit: DurationUnit | 'ms' = 'ms'): number => {\n  duration = duration.trim() as DurationString;\n  const durationNumberStr = duration.substring(0, duration.length - 1).trimEnd(); // trimEnd for `10 m`\n  if (!isNumber(durationNumberStr)) {\n    throw new Error(`not_a_number`);\n  }\n  const durationNumber = +durationNumberStr;\n  const durationUnit = duration.substring(duration.length - 1) as DurationUnit;\n  if (unitConversion[durationUnit] == null) {\n    throw new Error(`invalid_init`);\n  }\n  return (durationNumber * unitConversion[durationUnit]) / (toUnit === 'ms' ? 1 : unitConversion[toUnit]);\n};\n\n/**\n * Limit number in range (min, max).\n */\nexport const clamp = (val: number, min: number, max: number): number => (val > max ? max : val < min ? min : val);\n\nexport const hex = (bytes: Uint8Array): string => {\n  let str = '';\n  for (const byte of bytes) {\n    str += byte.toString(16).padStart(2, '0');\n  }\n  return str;\n};\n\nexport const calcDiscount = (marketPrice: number, salePrice: number, decimal = 2, upSide = true): number => {\n  decimal = Math.pow(10, decimal);\n  return Math.round(((marketPrice - salePrice) / (upSide ? salePrice : marketPrice)) * 100 * decimal) / decimal;\n};\n\nexport const simpleHashNumber = (num: number): string => {\n  return (num >>> 0).toString(36);\n};\n"]}